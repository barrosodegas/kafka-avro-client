/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.barroso.kafka.avroclient.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockSeparation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6957728222263774554L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockSeparation\",\"namespace\":\"br.com.barroso.kafka.avroclient.avro\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Stock separation code.\"},{\"name\":\"order\",\"type\":{\"type\":\"record\",\"name\":\"Order\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Order code.\"},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer code.\"},{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer first name.\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer last code.\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer email.\",\"default\":null}]},\"doc\":\"Customer.\"},{\"name\":\"products\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product code.\"},{\"name\":\"product_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product name.\"},{\"name\":\"product_price\",\"type\":\"double\",\"doc\":\"Product price.\"},{\"name\":\"product_amount\",\"type\":\"int\",\"doc\":\"Product amount.\",\"default\":1}]}},\"doc\":\"Product list.\"}]},\"doc\":\"Order.\"},{\"name\":\"invoice_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Invoice code.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockSeparation> ENCODER =
      new BinaryMessageEncoder<StockSeparation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockSeparation> DECODER =
      new BinaryMessageDecoder<StockSeparation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockSeparation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockSeparation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockSeparation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockSeparation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockSeparation from a ByteBuffer. */
  public static StockSeparation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Stock separation code. */
   private java.lang.String code;
  /** Order. */
   private br.com.barroso.kafka.avroclient.avro.Order order;
  /** Invoice code. */
   private java.lang.String invoice_code;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockSeparation() {}

  /**
   * All-args constructor.
   * @param code Stock separation code.
   * @param order Order.
   * @param invoice_code Invoice code.
   */
  public StockSeparation(java.lang.String code, br.com.barroso.kafka.avroclient.avro.Order order, java.lang.String invoice_code) {
    this.code = code;
    this.order = order;
    this.invoice_code = invoice_code;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return order;
    case 2: return invoice_code;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.String)value$; break;
    case 1: order = (br.com.barroso.kafka.avroclient.avro.Order)value$; break;
    case 2: invoice_code = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return Stock separation code.
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Gets the value of the 'order' field.
   * @return Order.
   */
  public br.com.barroso.kafka.avroclient.avro.Order getOrder() {
    return order;
  }


  /**
   * Gets the value of the 'invoice_code' field.
   * @return Invoice code.
   */
  public java.lang.String getInvoiceCode() {
    return invoice_code;
  }


  /**
   * Creates a new StockSeparation RecordBuilder.
   * @return A new StockSeparation RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder newBuilder() {
    return new br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder();
  }

  /**
   * Creates a new StockSeparation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockSeparation RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder newBuilder(br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder other) {
    return new br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder(other);
  }

  /**
   * Creates a new StockSeparation RecordBuilder by copying an existing StockSeparation instance.
   * @param other The existing instance to copy.
   * @return A new StockSeparation RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder newBuilder(br.com.barroso.kafka.avroclient.avro.StockSeparation other) {
    return new br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder(other);
  }

  /**
   * RecordBuilder for StockSeparation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockSeparation>
    implements org.apache.avro.data.RecordBuilder<StockSeparation> {

    /** Stock separation code. */
    private java.lang.String code;
    /** Order. */
    private br.com.barroso.kafka.avroclient.avro.Order order;
    private br.com.barroso.kafka.avroclient.avro.Order.Builder orderBuilder;
    /** Invoice code. */
    private java.lang.String invoice_code;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order)) {
        this.order = data().deepCopy(fields()[1].schema(), other.order);
        fieldSetFlags()[1] = true;
      }
      if (other.hasOrderBuilder()) {
        this.orderBuilder = br.com.barroso.kafka.avroclient.avro.Order.newBuilder(other.getOrderBuilder());
      }
      if (isValidValue(fields()[2], other.invoice_code)) {
        this.invoice_code = data().deepCopy(fields()[2].schema(), other.invoice_code);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockSeparation instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.barroso.kafka.avroclient.avro.StockSeparation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order)) {
        this.order = data().deepCopy(fields()[1].schema(), other.order);
        fieldSetFlags()[1] = true;
      }
      this.orderBuilder = null;
      if (isValidValue(fields()[2], other.invoice_code)) {
        this.invoice_code = data().deepCopy(fields()[2].schema(), other.invoice_code);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * Stock separation code.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Stock separation code.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder setCode(java.lang.String value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Stock separation code.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * Stock separation code.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'order' field.
      * Order.
      * @return The value.
      */
    public br.com.barroso.kafka.avroclient.avro.Order getOrder() {
      return order;
    }

    /**
      * Sets the value of the 'order' field.
      * Order.
      * @param value The value of 'order'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder setOrder(br.com.barroso.kafka.avroclient.avro.Order value) {
      validate(fields()[1], value);
      this.orderBuilder = null;
      this.order = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'order' field has been set.
      * Order.
      * @return True if the 'order' field has been set, false otherwise.
      */
    public boolean hasOrder() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'order' field and creates one if it doesn't exist yet.
     * Order.
     * @return This builder.
     */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder getOrderBuilder() {
      if (orderBuilder == null) {
        if (hasOrder()) {
          setOrderBuilder(br.com.barroso.kafka.avroclient.avro.Order.newBuilder(order));
        } else {
          setOrderBuilder(br.com.barroso.kafka.avroclient.avro.Order.newBuilder());
        }
      }
      return orderBuilder;
    }

    /**
     * Sets the Builder instance for the 'order' field
     * Order.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder setOrderBuilder(br.com.barroso.kafka.avroclient.avro.Order.Builder value) {
      clearOrder();
      orderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'order' field has an active Builder instance
     * Order.
     * @return True if the 'order' field has an active Builder instance
     */
    public boolean hasOrderBuilder() {
      return orderBuilder != null;
    }

    /**
      * Clears the value of the 'order' field.
      * Order.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder clearOrder() {
      order = null;
      orderBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoice_code' field.
      * Invoice code.
      * @return The value.
      */
    public java.lang.String getInvoiceCode() {
      return invoice_code;
    }

    /**
      * Sets the value of the 'invoice_code' field.
      * Invoice code.
      * @param value The value of 'invoice_code'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder setInvoiceCode(java.lang.String value) {
      validate(fields()[2], value);
      this.invoice_code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'invoice_code' field has been set.
      * Invoice code.
      * @return True if the 'invoice_code' field has been set, false otherwise.
      */
    public boolean hasInvoiceCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'invoice_code' field.
      * Invoice code.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.StockSeparation.Builder clearInvoiceCode() {
      invoice_code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockSeparation build() {
      try {
        StockSeparation record = new StockSeparation();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.String) defaultValue(fields()[0]);
        if (orderBuilder != null) {
          record.order = this.orderBuilder.build();
        } else {
          record.order = fieldSetFlags()[1] ? this.order : (br.com.barroso.kafka.avroclient.avro.Order) defaultValue(fields()[1]);
        }
        record.invoice_code = fieldSetFlags()[2] ? this.invoice_code : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockSeparation>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockSeparation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockSeparation>
    READER$ = (org.apache.avro.io.DatumReader<StockSeparation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
