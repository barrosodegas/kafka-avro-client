/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.barroso.kafka.avroclient.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8828064061951390946L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"br.com.barroso.kafka.avroclient.avro\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Order code.\"},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer code.\"},{\"name\":\"first_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer first name.\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer last code.\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer email.\",\"default\":null}]},\"doc\":\"Customer.\"},{\"name\":\"products\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product code.\"},{\"name\":\"product_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product name.\"},{\"name\":\"product_price\",\"type\":\"double\",\"doc\":\"Product price.\"},{\"name\":\"product_amount\",\"type\":\"int\",\"doc\":\"Product amount.\",\"default\":1}]}},\"doc\":\"Product list.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Order to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Order from a ByteBuffer. */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Order code. */
   private java.lang.String code;
  /** Customer. */
   private br.com.barroso.kafka.avroclient.avro.Customer customer;
  /** Product list. */
   private java.util.List<br.com.barroso.kafka.avroclient.avro.Product> products;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param code Order code.
   * @param customer Customer.
   * @param products Product list.
   */
  public Order(java.lang.String code, br.com.barroso.kafka.avroclient.avro.Customer customer, java.util.List<br.com.barroso.kafka.avroclient.avro.Product> products) {
    this.code = code;
    this.customer = customer;
    this.products = products;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return customer;
    case 2: return products;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.String)value$; break;
    case 1: customer = (br.com.barroso.kafka.avroclient.avro.Customer)value$; break;
    case 2: products = (java.util.List<br.com.barroso.kafka.avroclient.avro.Product>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return Order code.
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Gets the value of the 'customer' field.
   * @return Customer.
   */
  public br.com.barroso.kafka.avroclient.avro.Customer getCustomer() {
    return customer;
  }


  /**
   * Gets the value of the 'products' field.
   * @return Product list.
   */
  public java.util.List<br.com.barroso.kafka.avroclient.avro.Product> getProducts() {
    return products;
  }


  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.Order.Builder newBuilder() {
    return new br.com.barroso.kafka.avroclient.avro.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.Order.Builder newBuilder(br.com.barroso.kafka.avroclient.avro.Order.Builder other) {
    return new br.com.barroso.kafka.avroclient.avro.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static br.com.barroso.kafka.avroclient.avro.Order.Builder newBuilder(br.com.barroso.kafka.avroclient.avro.Order other) {
    return new br.com.barroso.kafka.avroclient.avro.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Order code. */
    private java.lang.String code;
    /** Customer. */
    private br.com.barroso.kafka.avroclient.avro.Customer customer;
    private br.com.barroso.kafka.avroclient.avro.Customer.Builder customerBuilder;
    /** Product list. */
    private java.util.List<br.com.barroso.kafka.avroclient.avro.Product> products;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.barroso.kafka.avroclient.avro.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = br.com.barroso.kafka.avroclient.avro.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[2], other.products)) {
        this.products = data().deepCopy(fields()[2].schema(), other.products);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.barroso.kafka.avroclient.avro.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      this.customerBuilder = null;
      if (isValidValue(fields()[2], other.products)) {
        this.products = data().deepCopy(fields()[2].schema(), other.products);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * Order code.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * Order code.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder setCode(java.lang.String value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Order code.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * Order code.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * Customer.
      * @return The value.
      */
    public br.com.barroso.kafka.avroclient.avro.Customer getCustomer() {
      return customer;
    }

    /**
      * Sets the value of the 'customer' field.
      * Customer.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder setCustomer(br.com.barroso.kafka.avroclient.avro.Customer value) {
      validate(fields()[1], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * Customer.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * Customer.
     * @return This builder.
     */
    public br.com.barroso.kafka.avroclient.avro.Customer.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(br.com.barroso.kafka.avroclient.avro.Customer.newBuilder(customer));
        } else {
          setCustomerBuilder(br.com.barroso.kafka.avroclient.avro.Customer.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * Customer.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder setCustomerBuilder(br.com.barroso.kafka.avroclient.avro.Customer.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * Customer.
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * Customer.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'products' field.
      * Product list.
      * @return The value.
      */
    public java.util.List<br.com.barroso.kafka.avroclient.avro.Product> getProducts() {
      return products;
    }

    /**
      * Sets the value of the 'products' field.
      * Product list.
      * @param value The value of 'products'.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder setProducts(java.util.List<br.com.barroso.kafka.avroclient.avro.Product> value) {
      validate(fields()[2], value);
      this.products = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'products' field has been set.
      * Product list.
      * @return True if the 'products' field has been set, false otherwise.
      */
    public boolean hasProducts() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'products' field.
      * Product list.
      * @return This builder.
      */
    public br.com.barroso.kafka.avroclient.avro.Order.Builder clearProducts() {
      products = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.String) defaultValue(fields()[0]);
        if (customerBuilder != null) {
          record.customer = this.customerBuilder.build();
        } else {
          record.customer = fieldSetFlags()[1] ? this.customer : (br.com.barroso.kafka.avroclient.avro.Customer) defaultValue(fields()[1]);
        }
        record.products = fieldSetFlags()[2] ? this.products : (java.util.List<br.com.barroso.kafka.avroclient.avro.Product>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
